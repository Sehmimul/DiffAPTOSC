import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as func
import torch.nn.utils as utils
import torch.multiprocessing as mp

import math as m
import random
import os
import sys
import time

# import psutil
import argparse
import json
# from itertools import product, permutations, combinations
import tqdm
import argparse
import traceback
import shutil
import logging

if __name__ == '__main__':
    
    # Command line arguments
    parser = argparse.ArgumentParser(description='Iterative Retraining')
    
    # Default values of parameters are defined
    parser.add_argument('--param', default = 'param/params.json', help='file containing hyperparameters')
    # parser.add_argument('-nf', '--nf', help="input number of objects generated by normalizing flows", type = int, default = 0)
    parser.add_argument('-v', '--verbose', help="increase output verbosity", action="store_true")
    # parser.add_argument('-p', '--plot', help="generate plots", action="store_true" )
    # parser.add_argument('-s', '--shuffle', help="Shuffles the objects generated by Normalizing Flows", action="store_true")
    # parser.add_argument('-o', '--og', help="Runs CNN to classify the objects generated by Normalizing Flows", action="store_true")
    
    args = parser.parse_args()
    # num_objects = args.nf
    
    verbose = args.verbose
    # plot = args.plot
    # shuffle = args.shuffle
    # og = args.og
    
    # Hyperparameters from json file
    with open(args.param) as paramfile:
        param = json.load(paramfile)
    
    # Creates a report file
    report_file = 'report.txt'
    
    if os.path.exists(report_file):
        os.remove(report_file)
    f = open(report_file, 'w')
    f.close()
    
    # cnn_params = param["CNN"]
    
    # Runs CNN as default
    # if (num_objects == 0):
    #     run_CNN(cnn_params, report_file)
    # else:
    #     # Load data
    #     nf_params = param["NF"]
    #     data_dir = 'data/ANTARES_NEW.csv'